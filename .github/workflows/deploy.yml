name: Deploy Whisnap to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.VPS_SSH_KEY }}
        known_hosts: ${{ secrets.VPS_KNOWN_HOSTS }}
        
    - name: Create production environment file
      run: |
        cat > .env.prod << EOF
        # Database
        DATABASE_NAME=whisnap_prod
        DATABASE_USER=whisnap_prod_user
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
        DATABASE_PORT=5432
        
        # Application Secrets
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        
        # NextAuth
        NEXTAUTH_URL=https://whisnap.com
        
        # Google OAuth
        GOOGLE_ID=${{ secrets.GOOGLE_ID }}
        GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}
        
        # Stripe
        STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}
        STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
        STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
        
        # Email
        RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
        EMAIL_SERVER=${{ secrets.EMAIL_SERVER }}
        
        # AI Providers
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}
        ASSEMBLYAI_API_KEY=${{ secrets.ASSEMBLYAI_API_KEY }}
        DEEPGRAM_API_KEY=${{ secrets.DEEPGRAM_API_KEY }}
        REV_AI_API_KEY=${{ secrets.REV_AI_API_KEY }}
        
        # Optional
        SENTRY_DSN=${{ secrets.SENTRY_DSN }}
        
        # Ports
        WEB_PORT=3000
        API_PORT=4000
        WS_PORT=4001
        REDIS_PORT=6379
        EOF
        
    - name: Deploy to VPS
      run: |
        # Copy files to VPS
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.next' \
          --exclude='dist' \
          --exclude='coverage' \
          --exclude='docs' \
          . ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/root/whisnap-deploy/
        
        # Deploy on VPS
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd /root/whisnap-deploy
          
          # Create backup of current deployment
          if [ -d "/root/whisnap-live" ]; then
            cp -r /root/whisnap-live /root/whisnap-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Clean up only whisnap containers (leave n8n alone)
          docker compose -f /root/whisnap-live/docker-compose.prod.yml down --remove-orphans || true
          docker network prune -f || true
          
          # Move new version to live
          rm -rf /root/whisnap-live || true
          mv /root/whisnap-deploy /root/whisnap-live
          cd /root/whisnap-live
          
          # Build new containers
          echo "🚀 Building new containers..."
          docker compose -f docker-compose.prod.yml --env-file .env.prod build web api
          
          # Ensure database and nginx are running
          docker compose -f docker-compose.prod.yml --env-file .env.prod up postgres nginx -d
          
          # Wait for database
          sleep 10
          
          # Run database migrations (with proper environment)
          docker compose -f docker-compose.prod.yml --env-file .env.prod run --rm -e HOME=/tmp web npx prisma migrate deploy
          
          # Start all services
          echo "🚀 Starting Whisnap services..."
          docker compose -f docker-compose.prod.yml --env-file .env.prod up -d
          
          
          # Health check - FAIL deployment if containers don't start
          sleep 30
          
          # Check if containers are actually running
          if ! docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "❌ No containers are running! Deployment failed."
            docker compose -f docker-compose.prod.yml logs
            exit 1
          fi
          
          # Health check endpoints - FAIL if they don't respond
          echo "🔍 Testing health endpoints..."
          if ! curl -f http://localhost:3000/api/health; then
            echo "❌ Web health check failed!"
            docker compose -f docker-compose.prod.yml logs web
            exit 1
          fi
          
          if ! curl -f http://localhost:4000/v1/health; then
            echo "❌ API health check failed!"
            docker compose -f docker-compose.prod.yml logs api
            exit 1
          fi
          
          echo "✅ All health checks passed!"
          
          # Cleanup old images
          docker image prune -f
          
          echo "✅ Deployment complete!"
          docker compose -f docker-compose.prod.yml ps
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful! https://whisnap.com is live"
        else
          echo "❌ Deployment failed! Check logs above"
          exit 1
        fi