name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    env:
      DEPLOY_USER: ${{ secrets.VPS_USER }}
      DEPLOY_HOST: ${{ secrets.VPS_HOST }}
    
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Configure SSH
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.VPS_SSH_KEY }}
        known_hosts: ${{ secrets.VPS_KNOWN_HOSTS }}
        
    - name: 🚀 Sync Application Code
      run: |
        echo "📦 Syncing code to production deploy directory..."
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.next' \
          --exclude='dist' \
          --exclude='coverage' \
          --exclude='docs' \
          . ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:/root/whisnap-deploy/
        echo "✅ Code sync complete"

    - name: 🔐 Setup Production Environment & SSL
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
        set -e
        
        echo "🔐 Creating production environment file..."
        cat > /root/whisnap-deploy/.env.prod << ENVEOF
        DATABASE_NAME=whisnap_prod
        DATABASE_USER=whisnap_prod_user
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
        DATABASE_PORT=5432
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=https://whisnap.com
        GOOGLE_ID=${{ secrets.GOOGLE_ID }}
        GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}
        STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}
        STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
        STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
        RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
        EMAIL_SERVER=${{ secrets.EMAIL_SERVER }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}
        ASSEMBLYAI_API_KEY=${{ secrets.ASSEMBLYAI_API_KEY }}
        DEEPGRAM_API_KEY=${{ secrets.DEEPGRAM_API_KEY }}
        REV_AI_API_KEY=${{ secrets.REV_AI_API_KEY }}
        SENTRY_DSN=${{ secrets.SENTRY_DSN }}
        WEB_PORT=3000
        API_PORT=4000
        WS_PORT=4001
        REDIS_PORT=6379
        ENVEOF
        
        echo "🔒 Setting up SSL certificates..."
        if [ ! -f "/etc/letsencrypt/live/whisnap.com/fullchain.pem" ]; then
          echo "❌ SSL certificate not found!"
          exit 1
        fi
        
        mkdir -p /root/whisnap-deploy/infra/nginx/ssl/
        cp /etc/letsencrypt/live/whisnap.com/fullchain.pem /root/whisnap-deploy/infra/nginx/ssl/
        cp /etc/letsencrypt/live/whisnap.com/privkey.pem /root/whisnap-deploy/infra/nginx/ssl/
        
        echo "📁 Moving to production directory..."
        rm -rf /root/whisnap-prod || true
        mv /root/whisnap-deploy /root/whisnap-prod
        
        echo "✅ Production environment setup complete"
        EOF

    - name: 🌐 Setup Blue-Green Network
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
        echo "🌐 Creating external edge network..."
        docker network create edge 2>/dev/null || echo "✅ Network 'edge' already exists"
        
        echo "🔧 Setting up nginx upstreams directory..."
        sudo mkdir -p /etc/nginx/upstreams
        
        # Copy upstream files if they don't exist
        if [ ! -f "/etc/nginx/upstreams/blue.conf" ]; then
          sudo cp /root/whisnap-prod/infra/nginx/upstreams/blue.conf /etc/nginx/upstreams/
        fi
        if [ ! -f "/etc/nginx/upstreams/green.conf" ]; then
          sudo cp /root/whisnap-prod/infra/nginx/upstreams/green.conf /etc/nginx/upstreams/
        fi
        
        # Set initial current.conf if it doesn't exist (don't test nginx yet)
        if [ ! -L "/etc/nginx/upstreams/current.conf" ] && [ ! -f "/etc/nginx/upstreams/current.conf" ]; then
          sudo ln -sf /etc/nginx/upstreams/blue.conf /etc/nginx/upstreams/current.conf
        fi
        
        echo "✅ Blue-green network setup complete"
        EOF

    - name: 🚀 Execute Blue-Green Deployment
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
        set -e
        cd /root/whisnap-prod
        
        echo "🚀 Executing blue-green deployment..."
        chmod +x scripts/deploy-blue-green.sh
        ./scripts/deploy-blue-green.sh production
        
        echo "✅ Blue-green deployment complete"
        EOF

    - name: 🔍 Production Health Check
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
        set -e
        
        echo "🔍 Performing comprehensive health checks..."
        
        # Check nginx configuration
        sudo nginx -t
        
        # Test HTTP endpoints
        echo "🌐 Testing HTTP access..."
        if curl -f --max-time 10 -H "Host: whisnap.com" http://localhost/ >/dev/null 2>&1; then
          echo "✅ HTTP access working"
        else
          echo "❌ HTTP access failed"
          exit 1
        fi
        
        # Test HTTPS endpoints  
        echo "🔒 Testing HTTPS access..."
        if curl -f --max-time 10 -k -H "Host: whisnap.com" https://localhost/ >/dev/null 2>&1; then
          echo "✅ HTTPS access working"
        else
          echo "❌ HTTPS access failed"
          exit 1
        fi
        
        # Test API endpoints
        echo "🔌 Testing API endpoints..."
        if curl -f --max-time 10 -H "Host: whisnap.com" http://localhost/api/v1/health >/dev/null 2>&1; then
          echo "✅ API endpoints working"
        else
          echo "❌ API endpoints failed"
          exit 1
        fi
        
        echo "🎉 All health checks passed!"
        echo "📊 Active containers:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(web-|api-|whisnap)"
        EOF

    - name: 🧹 Cleanup
      if: success()
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
        echo "🧹 Cleaning up unused Docker resources..."
        docker image prune -f
        docker container prune -f
        echo "✅ Cleanup complete"
        EOF

    - name: 📊 Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Blue-Green Production deployment completed successfully!"
          echo "🌐 Application available at: https://whisnap.com"
          echo "✨ Zero-downtime deployment achieved"
        else
          echo "❌ Production deployment failed!"
          exit 1
        fi